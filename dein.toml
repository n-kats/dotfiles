[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/denite.nvim'

[[plugins]]
repo = 'prabirshrestha/async.vim'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add = '''
let g:lsp_signs_enabled = 1         " enable signs
let g:lsp_diagnostics_echo_cursor = 1 " enable echo under cursor when in normal mode

let g:lsp_signs_error = {'text': '✗'}
let g:lsp_signs_warning = {'text': '‼'}

nmap K :<C-u>LspHover<CR>
nmap <Leader>R :<C-u>LspRename<CR>
nmap <Leader>d :<C-u>LspDefinition<CR>
nmap <Leader>n :<C-u>LspReferences<CR>
'''

[[plugins]]
repo = 'mattn/vim-lsp-settings'
hook_add = '''
autocmd BufWritePre <buffer> LspDocumentFormatSync
let g:lsp_settings_root_markers = ['.pyproject.toml', 'setup.py', '.git', '.git/']
let g:lsp_settings = {
\   'pylsp-all': {
\     'workspace_config': {
\       'pylsp': {
\         'configurationSources': ['flake8'],
\         'plugins': {
\           'flake8': {
\             'enabled': 0
\           },
\           'mccabe': {
\             'enabled': 0
\           },
\           'pycodestyle': {
\             'enabled': 0
\           },
\           'pylsp_mypy': {
\             'enabled': 1
\           },
\           'pylint': {
\             'enabled': 1,
\             'args': ["--rcfile setup.cfg", "--distable=import-error"]
\           },
\           'pyflakes': {
\             'enabled': 0
\           },
\         },
\       },
\     },
\   }
\}
'''
hook_post_source = '''
  " Highlight LSP warnings strongly (like errors)
  highlight link LspWarningHighlight Error
'''

# ['flake8', 'yapf', 'black', 'mypy']
[[plugins]]
repo = 'halkn/lightline-lsp'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
let g:lightline = {
\  'colorscheme': 'solarized',
\  'mode_map': {'c': 'NORMAL'},
\  'active': {
\    'left': [
\       ['mode', 'paste', 'lsp_errors', 'lsp_warnings'],
\       ['readonly', 'filename', 'modified', 'method']
\    ],
\    'right': [
\       ['lineinfo'],
\       ['percent'],
\       ['fileformat', 'fileencoding', 'filetype'],
\    ]
\  },
\  'inactive': {
\    'left': [
\       ['mode', 'paste'],
\       ['readonly', 'filename', 'modified']
\    ],
\    'right': [
\       ['lineinfo'],
\       ['percent'],
\       ['fileformat', 'fileencoding', 'filetype'],
\       ['lsp_errors'],
\    ]
\  },
\  'component_expand': {
\    'lsp_warnings': 'lightline_lsp#warnings',
\    'lsp_errors':   'lightline_lsp#errors',
\  },
\  'component_type': {
\    'lsp_warnings': 'warning',
\    'lsp_errors':   'errors',
\  },
\}
'''

[[plugins]]
repo='prabirshrestha/asyncomplete.vim'

[[plugins]]
repo='prabirshrestha/asyncomplete-lsp.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'Shougo/neosnippet.vim'
hook_add = '''
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

let g:neosnippet#snippets_directory='~/snippets/neosnippet'

imap <expr><TAB>
 \ pumvisible() ? "\<C-n>" :
 \ neosnippet#expandable_or_jumpable() ?
 \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
 \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
if = "has('nvim')"
on_i = 1
hook_add = '''
  let g:deoplete#enable_at_startup = 1
'''

[[plugins]]
repo = 'tbodt/deoplete-tabnine'
build = "./install.sh"

[[plugins]]
repo = 'Shougo/unite.vim'

[[plugins]]
repo = 'Shougo/vimfiler'
hook_add = '''
nnoremap <leader>e :VimFilerExplore -split -winwidth=30 -find -no-quit<Cr>
let g:vimfiler_as_default_explorer=1
let g:vimfiler_ignore_pattern='\(^\.\|\~$\|\.pyc$\|\.[oad]$\)'
'''

# [[plugins]]
# repo = 'Shougo/defx.nvim'

[[plugins]]
repo = 'lambdalisue/fern.vim'

[[plugins]]  # fern 用
repo = 'antoinemadec/FixCursorHold.nvim'

[[plugins]]
repo = 'mattn/sonictemplate-vim'
hook_add = '''
let g:sonictemplate_vim_template_dir = [
  \ '~/git/template'
  \]
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
let g:quickrun_config={'*': {'split': ''}}
set splitright
let g:quickrun_config = {'*': {'hook/time/enable': '1'},}
nmap <Leader>r :<C-u>QuickRun<CR>

let g:quickrun_config['cuda'] = {
  \'command' : 'nvcc',
  \}

let g:quickrun_config['cpp'] = {
  \'command' : 'g++',
  \'cmdopt' : '-std=c++14',
  \}

if g:is_pipenv_active
  let g:quickrun_config['python'] = {
      \'command' : 'pipenv',
      \'exec': ['%c run python %s']
      \}
  let g:quickrun_config['yaml'] = {
      \'command' : 'pipenv',
      \'exec': ['%c run yq . %s']
      \}
elseif g:is_poetry_active
  let g:quickrun_config['python'] = {
      \'command' : 'poetry',
      \'exec': ['%c run python %s']
      \}
  let g:quickrun_config['yaml'] = {
      \'command' : 'poetry',
      \'exec': ['%c run yq . %s']
      \}
elseif g:is_pyenv_system
  let g:quickrun_config['python'] = {
      \'command' : 'python3'
      \}
  let g:quickrun_config['yaml'] = {
      \'command' : 'yq',
      \'exec': ['$c . %s']
      \}
else
  let g:quickrun_config['python'] = {
      \'command' : 'python'
      \}
  let g:quickrun_config['yaml'] = {
      \'command' : 'yq',
      \'exec': ['%c . %s']
      \}
endif
'''

[[plugins]]
repo = 'vim-scripts/grep.vim'

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
let g:indentLine_fileTypeExclude = ['help']
set list lcs=tab:\|\ ""
let g:indentLine_color_term = 239

'''

 # let g:ale_fixers = {'python': ['autopep8', 'yapf', 'black']}
[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
  let g:ale_python_auto_poetry = 1
  let g:ale_python_pylint_executable = 'poetry run pylint'
  let g:ale_python_pylint_use_global = 0
  if filereadable(".use_pysen")
    let g:ale_fixers = {'python': []}
  else
    let g:ale_fixers = {'python': ['autopep8', 'yapf']}
    let g:ale_fix_on_save = !filereadable(".not_autofix")
    if filereadable('setup.cfg')
      let g:ale_python_pylint_options = '--rcfile setup.cfg'
    else
      let g:ale_python_pylint_options = ''
    endif
  endif
'''

[[plugins]]
repo = 'majutsushi/tagbar'
hook_add = '''
nnoremap <leader>t :TagbarToggle<CR>
'''

# [[plugins]]
# repo = 'editorconfig/editorconfig-vim'
# hook_add = '''
#   let g:EditorConfig_core_mode = 'external_command'
# '''

# html
[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = 'html'

[[plugins]]
repo = 'slim-template/vim-slim'
on_ft = 'slim'

# tex
[[plugins]]
repo = 'vim-latex/vim-latex'
on_ft = 'tex'

# ruby
[[plugins]]
repo = 'tpope/vim-rails'
on_ft = 'ruby'

[[plugins]]
repo = 'tpope/vim-endwise'
on_ft = 'ruby'

# [[plugins]]
# repo = 'alpaca-tc/alpaca_tags'

# [[plugins]]
# repo = 'vim-scripts/ruby-matchit'


[[plugins]]
repo = 'elzr/vim-json'
on_ft = 'json'
hook_add = '''
let g:vim_json_syntax_conceal = 0
'''

# javascript
[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = 'typescript'

[[plugins]]
repo = 'peitalin/vim-jsx-typescript'
on_ft = 'typescript'

[[plugins]]
repo = 'jason0x43/vim-js-indent'

[[plugins]]
repo = 'mxw/vim-jsx'
on_ft = 'jsx'

[[plugins]]
repo = 'posva/vim-vue'
on_ft = 'vue'

# [[plugins]]
# repo = 'claco/jasmine/vim'

# [[plugins]]
# repo = 'nathanaelkane/vim-indent-guides'

[[plugins]]
repo = 'kchmck/vim-coffee-script'
on_ft = 'coffee'

[[plugins]]
repo = 'mtscout6/vim-cjsx'
on_ft = 'cjsx'

[[plugins]]
repo = 'ryym/vim-riot'
on_ft = 'tag'

# scala
[[plugins]]
repo = 'derekwyatt/vim-scala'
on_ft = 'scala'

# go
# [[plugins]]
# repo = "nsf/gocode"
# on_ft = 'go'
#
# [[plugins]]
# repo = "rogpeppe/godef"
# on_ft = 'go'

[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'
hook_add = '''
let g:go_gocode_unimported_packages = 1
" function! OnGo() abort
"   autocmd InsertLeave <buffer> GoImports
" endfunction
" autocmd FileType go call OnGo()
'''

[[plugins]]
repo = 'vim-jp/vim-go-extra'
on_ft = 'go'

# [[plugins]]
# repo = 'neomake/neomake'

# [[plugins]]
# repo = 'zchee/deoplete-go'
# on_i = 2
# on_ft = 'go'

# python
[[plugins]]
repo = 'bonprosoft/pysen.vim'
on_ft = 'python'
hook_add = ''''
let g:pysen_language_server_config = {
  \ 'enableLintOnSave': v:true,
  \ 'enableFormatOnSave': v:true,
  \ 'enableCodeAction': v:true,
  \ 'lintTargets': ['lint'],
  \ 'formatTargets': ['format', 'lint'],
  \ }
'''
# [[plugins]] # TODO
# repo='ryanolsonx/vim-lsp-python'
# on_ft = 'python'
# hook_add = '''
#   if executable('pyls')
#     au User lsp_setup call lsp#register_server({
#         \ 'name': 'pyls',
#         \ 'cmd': {server_info->['pyls']},
#         \ 'whitelist': ['python'],
#         \ 'workspace_config': {
#         \   'pyls': {
#         \     'plugins': {
#         \       'pydocstyle': {'enabled': v:true},
#         \       'preload': {'enabled': v:true, 'modules': ['tensorflow', 'numpy']},
#         \       'yapf': {'enabled': v:true},
#         \       'isort': {'enabled': v:false}
#         \     }
#         \   }
#         \ }})
#   endif
# '''
# c.f. https://github.com/palantir/python-language-server/blob/develop/vscode-client/package.json

[[plugins]]
repo = 'davidhalter/jedi-vim'
on_ft = 'python'
hook_add = '''
  let g:jedi#auto_initialization = 1
  let g:jedi#popup_on_dot = 0
  let g:jedi#force_py_version = 3
  let g:jedi#completions_enabled = 1
  let g:jedi#smart_auto_mappings = 0
  let g:jedi#goto_command = ""
  let g:jedi#goto_assignments_command = "<leader>g"
  let g:jedi#goto_definitions_command = ""
  let g:jedi#documentation_command = ""
  let g:jedi#usages_command = ""
  let g:jedi#completions_command = "<C-c>"
  let g:jedi#rename_command = "<leader>R"
'''

[[plugins]]
repo = 'nvie/vim-flake8'
on_ft = 'python'

# rust
[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = 'rust'
hook_add = '''
  let g:rustfmt_autosave = 1
  let g:rust_doc#define_map_K = 0
'''

[[plugins]]
repo = 'sebastianmarkow/deoplete-rust'
on_ft = 'rust'
depends = ['deoplete.nvim']
hook_source = '''
    let g:deoplete#sources#rust#racer_binary=system('echo -n $(which racer)')
    let g:deoplete#sources#rust#rust_source_path='{$(rustc --print sysroot)/lib/rustlib/src/rust/src}'
    let $RUST_SRC_PATH='{$(rustc --print sysroot)/lib/rustlib/src/rust/src}'
    let g:deoplete#sources#rust#show_duplicates=1
    let g:deoplete#sources#rust#disable_keymap=1
    nmap <buffer> gd <plug>DeopleteRustGoToDefinitionDefault
    nmap <buffer> K  <plug>DeopleteRustShowDocumentation
'''

[[plugins]]
repo = 'rhysd/rust-doc.vim'
on_ft = 'rust'
hook_source = '''
    " rustドキュメントのパス指定
    let g:rust_doc#downloaded_rust_doc_dir = '{rustドキュメントのフルパス}'
'''

# toml
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

# vim
[[plugins]]
repo = 'thinca/vim-ft-diff_fold'
on_ft = 'diff'

[[plugins]]
repo = 'thinca/vim-ft-vim_fold'
on_ft = 'vim'

[[plugins]]
repo = 'thinca/vim-ft-help_fold'
on_ft = 'help'

# markdown
[[plugins]]
repo = 'rcmdnk/vim-markdown'
on_ft = ['markdown', 'mkd']
hook_add = '''
  let g:vim_markdown_folding_disabled = 1
  let g:vim_markdown_conceal = 0
  let g:tex_conceal = ""
  let g:vim_markdown_math = 1
'''
# coq
# [[plugins]]
# repo = 'jvoorhis/coq.vim'
# on_ft = 'coq'
# [[plugins]]
# repo = 'vim-scripts/CoqIDE'
# on_ft = 'coq'

# julia
# [[plugins]]
# repo = 'n-kats/julia-vim'
# rev = 'latextounicode'
# on_ft = 'julia'
